# -*- coding: utf-8 -*-
"""trabalho.desenvolvimento.software.2024

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z7XMcd2XmK13QbbVqALdHsPysc-4Bip7

# modulo 1

# matematica ✅
"""

#modulo 1
#operações simples
#Operações simples - Perguntar ao usuário se ele quer somar, subtrair, multiplicar ou dividir. Dependendo da resposta, executar a operação escolhida.

print('Bem vindo a funcionalidade operações simples, nesta funcionalidade temos: soma,subtração,multiplicação e divisão.')

escolha = input('qual operação deseja fazer ? Digite 1 para soma , 2 para subtração , 3 para multiplicação , 4 para divisão  ')
if escolha  == '1' :
  soma = 0
  while True :
    numero = float(input(f'digite o numero : '))
    soma += numero
    continuar = input(f'deseja continuar? (s/n) ')
    if continuar.lower() != 's' :
         break
  print(f' a soma e : {soma}')

elif escolha == '2':
      subtracao = float(input('Digite o primeiro número: '))
      while True:
          numero2 = float(input('Digite o próximo número: '))
          subtracao-= numero2
          continuar = input('Deseja continuar? (s/n) ').lower()
          if continuar != 's':
             break
      print(f'O resultado da subtração é: {subtracao}')

elif  escolha == '3':
      multiplicao = float(input('Digite o primeiro número: '))
      while True:
        numero = float(input('Digite o próximo número: '))
        multiplicao *= numero
        continuar = input('Deseja continuar? (s/n) ').lower()
        if continuar != 's':
            break
      print(f'O resultado da multiplicação é: {multiplicao}')

else  :
     escolha  == '4'
     divisao = float(input('Digite o primeiro número: '))
     while True:
        try :
          numero = float(input('Digite o próximo número: '))
          divisao /= numero
        except ZeroDivisionError:
          print('ERRO:não e possivel dividir por zero , tente novamente ')

        continuar = input('Deseja continuar? (s/n) ').lower()
        if continuar != 's':
            break

#Tabuada - Calcular a tabuada de um número por outro, sendo que ambos os números são fornecidos pelo usuário (ex.: tabuada de 2 até 20 = 2 x 1 = 1, 2 x 2 = 4, 2 x 3 = 6, ..., 2 x20 = 40).
#incremento a tabuada como um contador
tabuada = 0

print('Bem vindo a funcionalidade tabuada!!!!')
try:
  numero_para_tabuada = int(input('digite o numero que deseja : '))
  numero_multiplicado = int(input('digite o numero de vezes que deseja que a tabuada seja feita :'))#pergunto ao usuario quais numeros ele deseja realizar a tabuada
except ValueError:
  print('ERRO,o termo digitado e invalido digite um numero inteiro ')
except Exception as e:
  print(f'desculpe ocorreu um erro inesperado {e}')
else:
  print('-'*12)
#crio o laço que vai rodar e criar a tabuada
  while tabuada  <= numero_multiplicado:
    print('{} x {}  = {}'.format(numero_para_tabuada ,tabuada ,numero_para_tabuada *tabuada ))
    tabuada+= 1
  print('-'*12)

#Soma de matrizes - Dadas duas matrizes fornecidas pelo usuário como String, onde as linhassão separadas por meio de um ponto-e-vírgula e os elementos de cada linha são separadospor um espaço em branco (ex.: "1 2 3; 4 5 6; 7 8 9"), calcular a soma dessas matrizes.
#
print('Bem vindo a funconalidade soma de matrizes !!!')
print('para passar as matrizes as linhas devem ser  separadas por meio de um ponto-e-vírgula e os elementos de cada linha são separadospor um espaço em branco')
def string_para_uma_matriz(matriz_para_uma_string):# inicio esse algotiritimo criando uma função que receb um argumento

     linhas = matriz_para_uma_string.split(';')#aqui a string matriz_para_uma_string e dividida em uma sub lista de string onde cada subsubstring representa uma linha da matriz
     matriz = [list(map(int,linha.split()))for linha in linhas]# conveto cada linha que e uma string em uma lista de inteiros e utilizo map(int)que converte cada string. o resultado e uma lista de listas de inteiros que represenatam matriz
     return matriz#a função retorna uma matriz ressultante

def matriz_para_string(matriz):# nessa linha defino  a função matriz_para_string, que recebe uma matriz (lista de listas) como argumento.
      return ";".join([' '.join(map(str , linha ))for linha in matriz])#e retorna uma matriz convertida, utilizando a função map string cada linha da matriz e e convertida para uma string, em seguida uso o .join para unir as matrizes por um espaço,finalmente as linhas resultantes sao unidas por ;

def somar_matrizes(matriz1,matriz2):#defino a função somar matrizes que recebe duas matrizes como argumento
      linhas = len(matriz1)#utilizo len para saber o numero de linhas da matriz assumindo que matriz 1 e matriz 2 tem o mesmo numero de linhas
      colunas = len(matriz1[0])#utilizo len para saber a quantidade de colunas da matriz assumindo que todas as linhas tem os mesmo numeros de colunas
      matriz_soma = []#crio uma matriz vazia para armazenar a soma

      for i in range(linhas):#crio um loop para percorrer cada linha da matriz
         linha_soma = []#crio uma lista para armazenar a soma dos elementos de uma linha
         for j in range(colunas):#crio um loop para percorrer cada coluna
                linha_soma.append(matriz1[i][j]+ matriz2[i][j])#Soma os elementos correspondentes das duas matrizes e adiciona o resultado à listautilizando o .append()que adiciona no ultimo lugar da lista
         matriz_soma.append(linha_soma)#adiciono a lista somada a matriz

      return matriz_soma#retorno a soma da matriz

matrix1 = input('Digite a primeira matriz : ')#solicito as matrizes para o usuario
matrix2 = input('Digite a segunda matriz : ')

matriz1 = string_para_uma_matriz(matrix1)#Converto as strings fornecidas pelo usuário em matrizes (listas de listas de inteiros).
matriz2 = string_para_uma_matriz(matrix2)


matriz_resultante = somar_matrizes(matriz1,matriz2)#Somo as duas matrizes e armazena o resultado em matriz_resultante.

resultado = matriz_para_string(matriz_resultante )#Converto a matriz resultante de volta para uma string no formato original.

print('A soma das matrizes digitadas è ')
print(resultado)

#Fatorial - Calcular o fatorial de um número passado pelo usuáriof
from math import factorial
print('Bem vindo a funcionalidade fatorial !!!!!!')
numero_para_fatorial = int(input('Qual numero você deseja que seja fatorado? '))
print('o fatorial do numero digitado {} è {}'.format(numero_para_fatorial, factorial(numero_para_fatorial)))

#Fibonacci - Calcular a sequência de Fibonacci dos primeiros n números, sendo que n é passado pelo usuário
try:
   n = int(input('Quantos termos você quer calcular a sequencia de fibonacci? '))#pergunto ao usuario quantos termos o usuario gostaria de calcular a sequencia de fibonacci
   if n < 0 :
     raise ValueError("O número de termos deve ser maior ou igual a zero.")
   sequencial = [0 , 1]#defino o sequencial que acontece matamaticamente na sequencia de fibonacci
   for n in range(2 , n):#abro o intervalo que vai de 2 a te o numero desejado , pq os primeiros termos de fibonacci e 1 e 0 e a soma dele e 2 , apartir dai o programa roda ate o termo definido
       termo_seguinte= sequencial [-1] + sequencial[-2]
       sequencial.append(termo_seguinte)

   print('A sequencia de fibonacci e {} '.format(sequencial[:n]))

except ValueError as e :
    print(f'f"Erro: {e}. Por favor, digite um número inteiro positivo.  ')
except Exception as e :
  print(f'desculpe ocorreu um erro {e}')

"""
# modulo 2
# TEXTO ✍

"""

#Modificar texto - Perguntar se quer colocar o texto em caixa alta, caixa baixa ou capitalizado.Dependendo da resposta, executar a operação escolhida.
print('Bem vindo ao modulo 2 texto !!!!')
print('Bem vindo a funcionalidade Modificação de texto!!!')
texto = str(input('Digite o texto que deseja : '))
escolha = int(input('deseja que o texto seja colocado em caixa alta,caixa baixa ou capitalizado. Use 1 para caixa alta , use 2 para caixa baixa  ou captalizado :  '))
if escolha == 1 :
    print('texto em caixa alta : {}'.format(texto.upper()))
elif escolha == 2 :
    print('texto em caixa baixa : {}'.format(texto.lower()))
elif escolha == 3 :
    print('texto captalizado : {}'.format(texto.capitalize()))
else:
    print('escolha nao cadastrada  ')

#. Contagem de ocorrências - Dado um termo e um texto fornecidos pelo usuário, buscar no texto quantas vezes o termo aparece.
print('Bem vindo a funcionalidade contagem de ocorrencias, nessa funcionalidade dado um texto fornecido, e possivel contar a a quantidade de vezes que um termo e repetido ')
texto = str(input('Digite o texto que deseja : ')).lower()
termo = str(input('digite o termo que deseja : ')).lower()
quantidade = texto.count(termo)
print('A quantidade de vezes que o termo {} aparece e {}'.format(termo,quantidade))

#Recortes de texto - Dado um termo e um texto fornecidos pelo usuário, encontrar todas as vezes que o termo aparece e mostrar na tela um recorte de 3 (três) caracteres antes e depois da ocorrência.
 #defino a posição inicial tal qual um contador para acompanhar e armazenar cada recorte
print('Bem vindo a funcionalidade recortes de texto !!!')#dou boas vindas ao usuario e informo como a funcionalidade funciona
print('Nesta funcionalidade, você fornece um texto e um termo assim vamos encontrar todas as vezes que este termo aparece')

texto = input('Digite o texto que deseja : ').lower()#peço que o ususario digite o texto e o termo e converto para minusculo para que nao ocorra erros caso ele digite o texto minusculo e o termo em maiusculo ou vice e versa
termo = input('Digite o termo que deseja : ').lower()

primeira_posição = 0

while True :#abro o laço  para que repita infinitamente ate que todas as ocorrencias do termo passado sejam encontrados
      posição = texto.find(termo,primeira_posição)

      if posição == -1 :
        break
      #tamanho_do_termo = #para cada uma das ocorrencias encontradas estipulo um inicio para o recorte e um fim para o mesmo e defino tambemr a minima posição desse rrecorte para adicionar 3 caracteres antes e depois
      inicio_do_recorte = max( 0  ,posição -3)
      fim_do_recorte =  min(len(texto),posição + len(termo)+ 3 )

      recorte = texto[inicio_do_recorte:fim_do_recorte] # utilizo um slicin para extrair o recorte do texto e logo em seguida o mostro para o usuario

      print(f'Recorte encontrado: "{recorte}"')

      primeira_posição = posição + len(termo) #encremento a atualização da primeira posição para logo apos a ocorrencia atual continuar a busca pelas proximas ocorrencias ate o fim do laço

#Gerador de senhas - Dado um número de caracteres fornecido pelo usuário, gerar uma senha aleatória com tamanho igual ao número fornecido. A senha gerada poderá ter letras maiúsculas, minúsculas, números e/ou caracteres especiais (!, ?, @, #, $, %, e *).
import random
print('bem vindo a funcionalidade gerador de senhas !!!')
print('Nesta funcionalidade um numero de caracteres deve ser fornecido para gerar uma senha aleatoria ')
numero_de_caracteres = int(input('Qual a quantidade de caracteres deseja em sua senha ?'))#pergunto ao usuario o numero de caracteres que ele deseja que a senha seja gerada
letras_maiusculas = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"#crio uma variavel para as letras maisuculas
letras_minusculas = "abcdefghijklmnopqrstuvwxyz"#uma pra minusculas
numeros = "0123456789"#uma para numeros
caracteres_especiais = "!@#$%*?"#uma para caracteres especiais
conjunto_completo = letras_maiusculas + letras_minusculas + numeros + caracteres_especiais#junto todas as opções em um so

senha = ''.join(random.choice(conjunto_completo) for _ in range(numero_de_caracteres))#combina a sequencia de strings, utilizando .join()depois utilizo a random.choice para embaralhar os termos passados desde que estejam de acordo com a quantidade de caracteres passados pelo ususario

print('A senha gerada e  {}'.format(senha ))#printo a senha na tela

#Contagem de palavras - Dado um texto fornecido pelo usuário, gerar uma saída que mostre uma lista contendo as palavras do texto e a quantidade de ocorrências de cada uma dessas palavras. [OPCIONAL]
print('bem vindo a funcionalidade contagem de palavras!!!  ')#inicio o algoritimo dando as boas vindas e explicando a duncionalidade
print('nesta funcionalidade um texto deve ser fornecido para que aja a contagem de palavras')

texto = input('Digite o texto que deseja : ')#peço para que o usuario me forneça o texto e o converto para minusculo

palavra =  texto.split()# quebro a palavra em pedaços

palavras = [palavra.lower() for  palavra in palavra]#converto o texto para minusculo ate os que ja estao na lista do split

contagem_de_palavras = {}# crio um dicionario para realizar a armazenação das palavras e de quantas vezes ela apareceu , Um dicionário vazio onde as palavras serão as chaves e as contagens serão os valores

for palavra in palavras:#inicio uma estrutura para fazer uma varredura na lista

  if palavra in contagem_de_palavras:  #verifico se as palavras ja estao no dicionario , se a palavra ja esta no dicionario e adiciono mais 1 para aumentar  se nao ela e adicionada com a contagem inicial de um
      contagem_de_palavras[palavra]  += 1
  else:
      contagem_de_palavras[palavra]  = 1

for palavra, contagem in contagem_de_palavras.items():# finalmente, mostro ao ususario a quantidade de vezes que cada palavra apareceu no texto,retornando em uma lista de tuplas e percorrendo cada palavra e sua contagem no dicionario
      print(f"A palavra '{palavra}' aparece {contagem} vez(es).")

"""# modulo 3


# ESCOLA 🏫
"""

#Cálculo de média aritmética de notas - Dadas n notas fornecidas pelo usuário, calcular a média aritmética dessas notas.
print('Bem vindo a funcionalidade media aritimetica de notas !! ')
print('Nessa funcionalidade e preciso informar  notas !!')
#comecei este algoritimo pedindo a quantidade de notas que o usuario deseja calcular a media
quantidade = int(input('digite a quantidade de notas que deseja calcular a media : ')) #iniciali-zo a soma como 0 para chamala depois e para que nao adicione a real aoma
soma = 0
notas = []#transformo as notas em uma lista para ter controle sobre a quantidade fornecida que e importante para o calculo de media
for i in range(quantidade): # o utilizo o for i in range para iniciar um loop ja que eu ja armazenei a quantidade de notas que ele deseja fornecer
    nota = float(input(f'digite a nota {i+1} : '))#peço a nota e adiciono a nota no final da lista
    notas.append(nota)

soma = sum(notas)#utilizo o sum , uma função que soma elementos de um iteravel
media = soma / quantidade#inicia a media
print('a media aritimetica das notas e {}'.format(media))#mostra a media na tela

#Média ponderada de notas - Dadas n notas e pesos fornecidos pelo usuário, calcular a média ponderada de cada uma dessas notas.
print('bem vindo a funcionalidade calculo de media ponderada !!!')
print('Para essa funcionalidade e necessario informar uma nota e um peso para essa nota ')
quantidade = int(input('digite a quantidade de notas que deseja calcular a media : ')) #iniciali-zo a soma como 0 para chamala depois e para que nao adicione a real aoma
notas = []#transformo as notas em uma lista para ter controle sobre a quantidade fornecida que e importante para o calculo de media
pesos = []#transformo os pesos em listas para ter controle e acessa - los depois
for i in range(quantidade): # inicio um loop
    nota = float(input(f'digite a nota {i+1} : '))#peço a nota e adiciono a nota no final da lista
    peso = float(input(f'digite o peso da nota   {i+1} : '))#peço o peso e adiciono no final da lista
    notas.append(nota)
    pesos.append(peso)
soma_produtos = sum(nota * peso for nota, peso in zip(notas, pesos))#Itera sobre vários iteráveis em paralelo, produzindo tuplas com um item de cada um.
soma_pesos = sum(pesos)#Soma start e os itens de um iterable da esquerda para a direita e retornam o total. Os itens do iterable são normalmente números e o valor inicial não pode ser uma string.
media_ponderada = soma_produtos / soma_pesos #
print('a media ponderada  das notas e {:.2f}'.format(media_ponderada))#mostro a media ponderada  na tela

# Cálculo de porcentagem de faltas - Dada uma carga horária da disciplina e a quantidade de aulas que o usuário faltou, fornecer informações sobre reprovação por falta (menos de 75% de presença) e quantas aulas o usuário ainda pode faltar sem que haja reprovação.
print('Bem vindo a funcionalidade calculo de porcentagem de faltas ')
print('para e necessario informar a carga horaria da dicsiplina e a quantidade de aulas ')
carga_h = int(input('informe a quantidade da carga horaria : '))
faltas = int(input('informe a quantidade de faltas : '))
aulas = carga_h/faltas
porcentagem_faltas = (faltas / aulas )* 100
limite = aulas * 0.25
restante =  limite - faltas
if porcentagem_faltas > 25:
  print('Esse aluno ja atingiu ou ultrapssou o limite de faltas e esta reprovado por falta ')
else :
  print(f'este aluno pode faltar {restante:.0f} dias sem reprovar')

"""# modulo 4
#MISCELANEAS✴

"""

#Codificar mensagem - Dado um texto e um número fornecidos pelo usuário, codificar esse texto. A codificação se dá de forma que cada caractere da mensagem é convertido para seu número inteiro ASCII e multiplicado pelo número inicialmente fornecido. O produto é composto de uma String com os Integers de cada caractere separados por um espaço em branco.
print('Bem vindo a funcionalidade codificar mensagens!!!')
print('Nesta funcionalidade e preciso informar um texto e um numero inteiro para realizar a multiplicação para a criação da codificação  ')
texto = input('Digite o texto que deseja : ')#solicito que o usuario insira o texto que deseja codificar
numero =  int(input('Digite o numero que deseja ser o multiplicador: '))#solicito um numero para ser usado como multiplicador para a criação do codigo
codificação = [] #crio uma lista vazia para armazenar os valores codificados
for  code in texto : #inicio um laço que percorrer todas as letras fornecidas e armazenar na variavel code
  valor_codigo = ord(code)* numero #utilizo a função ord() Dada uma string que representa um caractere Unicode, retorna um número inteiro representando o ponto de código Unicode desse caractere.
  codificação.append(str(valor_codigo))
resultado = ' '.join(codificação)
print('A mensagem codificada e {}'.format(resultado))

#Decodificar mensagem - Dado um texto e um número fornecidos pelo usuário, decodificar esse texto de forma a reverter a lógica da funcionalidade #1
print('Bem vindo a funcionalidade decodificar mensagem !!!')
print('Nesta funcionalidade e preciso fornecer um texto codificado  e o  numero utilizado como seu multiplicdor  ')
texto = input('Digite o texto codificado que deseja : ')#pesso ao usuario que informe a mensagem codifidada
numero =  int(input('Digite o numero que foi usado como multiplicador: '))#pesso ao usuario que informe qual o numero foi utilizado na decodificação
decodificação = [] #crio uma lista vazia para armazenar a mensagem decodificada
valores_codificados = texto.split()#adiciono espaços a mensagem decodificada para separa-los nas individualmente em strings, ja que para se codificar e cada pedaço de string corresponde a uma  numeração no ASCII de um caractere, multiplicado por um número fornecido.
for valor in valores_codificados : #inicio um laço para fazer uma varredura na mensagem codificada
  valor_inteiro = int(valor)#converto os valores de string para numeros inteiros
  valor_codificado_original = valor_inteiro / numero#se para codificar um numero e nessario multiplica-lo pelo numero fornecido, para decodificar que logicamente e o contrario se usa a divisão que e o contrario da multiplicação
  valor_codificado_original.is_integer()#verifico se os valores codificados são inteiros
  caractere = chr(int(valor_codificado_original) )#função inversa de python que retorna a partir de um numero inteiro um caractere a qual pertence de acordo com ASCII, e como chr so retorna a numeros inteiros eu defino o valor codificado original como inteiro
  decodificação.append(caractere)#adiciono ao final da lista o caractere decodificaod
mensagem_final = ''.join(decodificação)#utilizo a função .join para unir todos os caracteres em ujma string individual
print('A mensagem decodificada e {}'.format(mensagem_final ))

#Gerar árvore de Natal - Dado um número n fornecido pelo usuário, gerar uma árvore de Natal de tamanho n.
from time import sleep
print('Bem vindo a funcionalidade Gerar arvore de natal !!')
print('Nesta funcinalidade e preciso que seja fornecido o tamanho da arvore ')
n = int(input('Qual o tamanho da arvore de natal que deseja :  '))

for i in range(1, n + 1):
   espaço = ' ' * (n - i  )
   estrela  = '*' * (2 * i - 1)
   sleep(2)
   print(espaço + estrela )
print(' ' * (n - 1 )+ '|')